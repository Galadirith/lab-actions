# https://docs.github.com/en/actions/managing-issues-and-pull-requests/scheduling-issue-creation

name: Create issue on schedule
on:
  schedule:
    - cron: 20 11 * * *
  workflow_dispatch:

env:
  REPO_OWNER: "galadirith"
  REPO_NAME: "lab-actions"
  PROJECT_OWNER: "galadirith"
  PROJECT_NUMBER: 3

jobs:
  create_issue:
    name: Create issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Generate issue body
      shell: python
      run: |
        from datetime import datetime, timedelta
        import os
        now =datetime.now()
        title = now.strftime('%Y-W%W')
        start = now - timedelta(days=now.weekday())
        stop = now + timedelta(days=-now.weekday(), weeks=1)
        properties = (
            f'## Properties\n'
            f'\n'
            f'- *Start:* {start.strftime("%Y-%m-%dT00:00:00")}\n'
            f'- *Stop:* {stop.strftime("%Y-%m-%dT00:00:00")}')
        days = '## Days\n\n' + '\n'.join([
            f'- [{(start+timedelta(days=d)).strftime("%Y-%m-%d")}]({(start+timedelta(days=d)).strftime("%Y%m%d")}_COMMENT_URL)'
            for d in range(7)])
        issue_body = (
            f'\n'
            f'\n'
            f'{properties}\n'
            f'\n'
            f'## Orbit\n'
            f'\n'
            f'\n'
            f'\n'
            f'{days}\n'
            f'\n'
            f'## References\n'
            f'\n'
            f'\n'
            )
        with open(os.getenv('GITHUB_ENV'), 'a') as f:
            f.write(f'ISSUE_BODY<<EOF\n{issue_body}\nEOF\n')
            f.write(f'ISSUE_TITLE={now.strftime("%Y-%m-%dT%H:%M:%S")}\n')
    - name: Create issue
      id: create_issue
      uses: imjohnbo/issue-bot@3daae12aa54d38685d7ff8459fc8a2aee8cea98b
      with:
        assignees: "galadirith"
        title: "${{env.ISSUE_TITLE}}"
        body: "${{env.ISSUE_BODY}}"
        pinned: false
        close-previous: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Get issue data
      id: get_issue_data
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        ISSUE_NUMBER: ${{ steps.create_issue.outputs.issue-number }}
      run: |
        issue_id="$(gh api graphql -f query='
          query($name: String!, $owner: String!, $number:Int!) {
            repository(owner: $owner, name: $name) {
              issue(number: $number) {
                id
              }
            }
          }' -F owner=$REPO_OWNER -F name=$REPO_NAME -F number=$ISSUE_NUMBER --jq '.data.repository.issue.id')"
        echo 'ISSUE_ID='$issue_id >> $GITHUB_ENV
    - name: Get project data
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        gh api graphql -f query='
          query($user: String!, $number: Int!) {
            user(login: $user){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f user=$PROJECT_OWNER -F number=$PROJECT_NUMBER > project_data.json

        echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
        echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
        echo 'TODO_OPTION_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV
        echo 'CLASS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Class") | .id' project_data.json) >> $GITHUB_ENV
        echo 'SATELLITE_OPTION_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Class") | .options[] | select(.name=="Satellite") |.id' project_data.json) >> $GITHUB_ENV


    - name: Add issue to project
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        item_id="$( gh api graphql -f query='
          mutation($project_id:ID!, $issue_id:ID!) {
            addProjectV2ItemById(input: {projectId: $project_id, contentId: $issue_id}) {
              item {
                id
              }
            }
          }' -f project_id=$PROJECT_ID -f issue_id=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"

          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
    - name: Set fields
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        gh api graphql -f query='
          mutation (
            $project: ID!
            $item: ID!
            $status_field: ID!
            $status_value: String!
            $class_field: ID!
            $class_value: String!
          ) {
            set_status: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $status_field
              value: { 
                singleSelectOptionId: $status_value
              }
            }) {
              projectV2Item {
                id
              }
            }
            set_class: updateProjectV2ItemFieldValue(input: {
              projectId: $project
              itemId: $item
              fieldId: $class_field
              value: { 
                singleSelectOptionId: $class_value
              }
            }) {
              projectV2Item {
                id
              }
            }
          }' -f project=${{env.PROJECT_ID}} -f item=${{env.ITEM_ID}} -f status_field=${{env.STATUS_FIELD_ID}} -f status_value=${{env.TODO_OPTION_ID}} -f class_field=${{env.CLASS_FIELD_ID}} -f class_value=${{env.SATELLITE_OPTION_ID}}